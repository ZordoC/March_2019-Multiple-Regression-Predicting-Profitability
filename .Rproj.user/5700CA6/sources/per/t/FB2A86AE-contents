#### Train and Test Set function ####


TrainAndTestSets <- function(label,p,data,seed){
  set.seed(seed)
  
  inTrain <- createDataPartition(y= label, p = p , list = FALSE)
  training <- data[inTrain,]
  testing <- data[-inTrain,]
  
  
  list(trainingSet=training,testingSet = testing)
  
}







#### Training Functions ####


TrainingFunction <- function(method,formula,data,tune,c=1000,gamma=0.0001)
  {
  
  fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
  
  if(method == "rf") {
    
    Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)  
  }

  else if (method == "knn"){
    
    preObj <- preProcess(data[, c(13,14,15)], method=c("center", "scale"))
    data <- predict(preObj, data)
    Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)  
  }
   
  else if (method == "svm"){ 
     
    Model <- svm(formula, data = data,cost=c , gamma = gamma)
  
    
    }

    return(Model)
  
  }



methods <- c("rf","knn","svm")

Models <- vector(mode = "list" , length = 3)

for(i in 1:3)
{
  
  Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
  
  
}

Models[[1]]

TrainAll3Models <- function (formula,data)
  {

  Model <- vector(mode="list", length=length(methods))

      methods <- c("rf","svm")

          for(i in 1:length(methods))
            {

            Model[[i]] <- TrainingFunction(methods[i],formula,data)


            }
      Model[[1]]



      }

methods <- c("rf","knn","svm")

Models <- vector(mode = "list" , length = 3)

for(i in 1:length(methods))
{
  
  if (methods[i] == "knn" ) 
    
  {
    
    Normal <- normalize(EP[,c(13,14,15)])
    
    EPNormal <- cbind(EP[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
    
    ListN <- TrainAndTestSets(EP$Volume,0.75,EPNormal,288)
    
    Models[[i]] <- TrainingFunction(methods[i],Volume~.,ListN$trainingSet,5)
    
    
  }
  else
    {  
    
    Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
    
  }
  
}

Models[[1]]


TrainAll3ModelsAtOnde <- function (data,label,p,seed) 
  
  
{
  
  methods <- c("rf","knn","svm")
  
  Models <- vector(mode = "list" , length = 3)
  
  for(i in 1:length(methods))
  {
    
    if (methods[i] == "knn" ) 
      
    {
      
      Normal <- normalize(data[,c(13,14,15)])
      
      EPNormal <- cbind(data[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
      
      ListN <- TrainAndTestSets(data$Volume,p,data,seed)
      
      Models[[i]] <- TrainingFunction(methods[i],label~.,ListN$trainingSet,5)
      
      
    }
    else
    {  
      
      ListY <- TrainAndTestSets(data$Volume,p,data,seed)
      
      Models[[i]] <- TrainingFunction(methods[i],Volume~.,ListY$trainingSet,5)
      
    }
    
  } 
  
  
  Models
  
  
  
}







