library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)

#For cleaning variables
rm(list = setdiff(ls(), lsf.str()))

current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')


#### Pre Processing ####
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)

#### Training and Testing sets ####

List <- TrainAndTestSets(EP$Volume,0.75,EP,233)

#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~.,List$trainingSet,5)

PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)

TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)

#### SVM ####

svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,5,100000,0.00001)  

svm.pred <- predict(svm.model,List$testingSet)

TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)

#### knn ####

 
 KNN <- TrainingFunction("knn",Volume~.,List$trainingSet,11)
 
# KnnList <- TrainAndTestSets(EP$Volume,0.75,EP,233)




KnnPrediction <- predict(KNN,List$testingSet)

TestResultsKNN <-postResample(KnnPrediction,List$testingSet$Volume)

TestResultsKNN
####


AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)

AllTestResults              


#### Training All 3 models at once #### 


TrainAll3Models(Volume ~.,List$trainingSet)

#### Errors ####

PredictionRandomForest

RealVolume <- List$testingSet$Volume


check <- cbind(PredictionRandomForest,RealVolume)
check
ABS <- abs(RealVolume - PredictionRandomForest)
plot(ABS)

RLT <- ABS/RealVolume

RLT

Efunction <- function ()
  {
    
  
  
  
  
  
  
  
}
