---
title: "Task # 3 "

author: "José Pedro Conceição, Kiko Sánchez , Eloi Cirera "
date: "March 25, 2019"
output: 

  html_document:
    toc: true
    toc_depth: 4
    toc_float: true
---

```{r setup, include=FALSE}
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)

```


## Executive Summary

  We were assigned to predict a blablabla
    Kiko or Eloi one of you should know how to rock this part, we just need to basically show some cool graphs, and explain why this task is not feaseble with de data we have, simple and short non technical, this is meant for the CEO to read, someone like Nathan.


```{r }
  




```


## Technical Report

<br/>
<br/>  

### Functions 
  
<br/>
<br/>    
  
#### Pre-process functions  
  
<br/>
<br/>  

```{r}
MyPlotFunction <- function(data,variable=0,variable2=0)
{
  if (variable2 == 0)
  {  
    G <- ggplot(data,aes(x= data[[variable]]) ) + 
      geom_bar()+ labs( x = variable) 
  }
    else
     G <- ggplot(data,aes(data,x= data[[variable]],y= data[[variable2]])) +
        geom_bar(stat = "Identity") + 
        labs(x = variable,y=variable2 , title = 'Bar Plot' )
  


}


```
<br/>
<br/>
  This function is for plotting every possible combination of barplots as quick as possible
<br/>
<br/>  

```{r}

SubSetDataProductTypes <- function(data,p,p1 = 0,p2 = 0 , p3 = 0 , p4 = 0)
{
  if ( p1 == 0 && p2 == 0 && p3 == 0 && p4 == 0)
  {
    Nsub <- subset(data, data$ProductType == p)
    
    return(Nsub)
  }
 else if (p2 == 0 && p3 == 0 && p4 == 0){
    Nsub <- subset(data, data$ProductType == p)
    
    Nsub2 <-subset(data, data$ProductType == p1)
    
    Nsub2 <- rbind(Nsub,Nsub2)
    
    return(Nsub2)
  }
else  if (p3 == 0 && p4 == 0) 
  {
    
    Nsub <- subset(data, data$ProductType == p)
    
    Nsub2 <-subset(data, data$ProductType == p1)
    
    Nsub3 <- subset(data,data$ProductType == p2)
    
    Nsub3 <- rbind(Nsub,Nsub2,Nsub3)
    
    return(Nsub3)
    
  }
  
else  if (p4 == 0){
    Nsub <- subset(data, data$ProductType == p)
    
    Nsub2 <-subset(data, data$ProductType == p1)
    
    Nsub3 <- subset(data,data$ProductType == p2)
    
    Nsub4 <- subeset(data,data$ProductType == p3)
    
    Nsub4 <- rbind(Nsub,Nsub2,Nsub3,Nsub4)
    
    return(Nsub4)
  }
  
  else{
    
    Nsub <- subset(data, data$ProductType == p)
    
    Nsub2 <-subset(data, data$ProductType == p1)
    
    Nsub3 <- subset(data,data$ProductType == p2)
    
    Nsub4 <- subeset(data,data$ProductType == p3)
    
    Nsub5 <- subset(data,data$ProductType == p4)
    
    Nsub5 <- rbind(Nsub,Nsub2,Nsub3,Nsub4,Nsub5)
    
    return(Nsub5)
  } 
}

```
<br/>
<br/>  

  This function is to subset our data by product types

<br/>
<br/>  
  
```{r}
  
    PPfunction <- function(data) {
  
  N <- dummyVars(" ~ .", data = data)
  
  N <- data.frame(predict(N, newdata = data))
  
  N <- N[,colSums(is.na(N)) == 0] 
  
  N 
  
}

```
<br/>
<br/>
    This is the dummyfy function, it takes the attribute "Product Type" and  creates 8 attributes (number of product types avaible), and fills with 0's and 1's,corrosponding to each product type.
<br/>
<br/>
```{r}
RmOut <- function(D,V)
  {
    
  Out <- boxplot(D$V ,plot = FALSE)$out
  K <- D[-which(D$V %in% Out),]
  K
}
```
<br/>
<br/>

#### Train / Test Functions

  Function for removing outliers, D is your data, V the variable/attribute/feature which has the outliers.
<br/>
<br/>
```{r}


TrainAndTestSets <- function(label,p,data,seed){
  set.seed(seed)
  
  inTrain <- createDataPartition(y= label, p = p , list = FALSE)
  training <- data[inTrain,]
  testing <- data[-inTrain,]
  
  
  list(trainingSet=training,testingSet = testing)
  
}


```
<br/>
<br/>
  Function for creating Training/Testing sets 
<br/>
<br/>
  
```{r}

TrainingFunction <- function(formula,data,method,tune){
  
  fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
  
  Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)  
  
  Model                       
  
}

```
<br/>
<br/>
  Function for training ModelS, KNN and Random Forest.
<br/>
<br/>    
  
### Main code 

<br/>
<br/>    
  
  
```{r}


#current_path = getActiveDocumentContext()$path
#setwd(dirname(current_path))
#setwd("..")
#rm(current_path)
EP <- read.csv( file ="/home/zordo/Documents/Ubiqum/R-Task3/data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "/home/zordo/Documents/Ubiqum/R-Task3/data/Npa.csv", header = TRUE , sep =',')
EP <- EP[,c(1,5,9,18)]



Knn <- EP %>% mutate_at(scale, .vars = vars(-1))


Knn <- PPfunction(Knn)

EP <- PPfunction(EP)



Knn <- RmOut(Knn)

EP <- RmOut(EP)

List <- TrainAndTestSets(EP$Volume,0.75,EP,233)

ListK <- TrainAndTestSets(Knn$Volume,0.75,Knn,233)


ModelRandomForest <- TrainingFunction(Volume ~.,List$trainingSet,"rf",5)

ModelRandomForest

KNN <- TrainingFunction(Volume ~.,ListK$trainingSet,"knn",5)

PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)

TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)

KnnPrediction <- predict(KNN,ListK$testingSet)

TestResultsKNN <-postResample(KnnPrediction,ListK$testingSet$Volume)






svm.model <- svm(Volume ~ . , data = List$trainingSet,cost=1000 , gamma = 0.001)

svm.pred <- predict(svm.model,List$testingSet)

TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)

AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)

AllTestResults  
```
  

  
