#### Train and Test Set function ####


TrainAndTestSets <- function(label,p,data,seed){
  set.seed(seed)
  
  inTrain <- createDataPartition(y= label, p = p , list = FALSE)
  training <- data[inTrain,]
  testing <- data[-inTrain,]
  
  
  list(trainingSet=training,testingSet = testing)
  
}







#### Training Functions ####


TrainingFunction <- function(method,formula,data,tune,cost = 1000 , gamma = 0.001)
  {
  
  fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
  
  if(method == "rf") {
    
    Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)  
  }

  else if (method == "knn"){
    
    preObj <- preProcess(data[, c(13,14,15)], method=c("center", "scale"))
    data <- predict(preObj, data)
    Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)  
  }
   
  else if (method == "svm"){ 
     
    Model <- svm(formula, data = data,cost=cost , gamma = gamma)
  
    
    }

    Model
  
  }




# TrainAll3Models <- function (formula,data)
#   {
#         
#   Model <- vector(mode="list", length=length(methods))
#   
#       methods <- c("rf","knn","svm") 
#   
#           for(i in 1:length(methods))
#             {
#             
#             Model[i] <- TrainingFunction(methods[i],formula,data)
#             
#           
#             }
#       Model
#   
#       
#       
#       }
#   
# methods <- c("rf","knn","svm") 
# 
# Models <- vector(mode = "list" , length = 3)
# 
# for(i in 1:3)
# {
#   
#   Models[i] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
#   
#   
# }
# 

          