}
else
G <- ggplot(data,aes(data,x= data[[variable]],y= data[[variable2]])) +
geom_bar(stat = "Identity") +
labs(x = variable,y=variable2 , title = 'Bar Plot' )
G
}
###
SubSetDataProductTypes <- function(data,p,p1 = 0,p2 = 0 , p3 = 0 , p4 = 0)
{
if ( p1 == 0 && p2 == 0 && p3 == 0 && p4 == 0)
{
Nsub <- subset(data, data$ProductType == p)
return(Nsub)
}
else if (p2 == 0 && p3 == 0 && p4 == 0){
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub2 <- rbind(Nsub,Nsub2)
return(Nsub2)
}
else  if (p3 == 0 && p4 == 0)
{
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub3 <- subset(data,data$ProductType == p2)
Nsub3 <- rbind(Nsub,Nsub2,Nsub3)
return(Nsub3)
}
else  if (p4 == 0){
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub3 <- subset(data,data$ProductType == p2)
Nsub4 <- subeset(data,data$ProductType == p3)
Nsub4 <- rbind(Nsub,Nsub2,Nsub3,Nsub4)
return(Nsub4)
}
else{
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub3 <- subset(data,data$ProductType == p2)
Nsub4 <- subeset(data,data$ProductType == p3)
Nsub5 <- subset(data,data$ProductType == p4)
Nsub5 <- rbind(Nsub,Nsub2,Nsub3,Nsub4,Nsub5)
return(Nsub5)
}
}
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
library(reshape)
library(corrplot)
#For cleaning variables
#rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
#### Pre Processing ####
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP,Volume)
#
# EP
# corr_all <- cor(EP)
# corr_all
#
# corrplot(corr_all,type="upper",tl.pos="td",method="circle",tl.cex = 0.5,tl.col='black',diag=FALSE)
#### Training and Testing sets ####
List <- TrainAndTestSets(EP$Volume,0.75,EP,123)
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~ x4StarReviews,List$trainingSet)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
#### Pre Processing ####
EP <- EP[,c(1,5,9,18)]
View(EP)
EP <- PPfunction(EP)
EP
View(EP)
EP <- RmOut(EP,Volume)
List <- TrainAndTestSets(EP$Volume,0.75,EP,123)
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~ x4StarReviews,List$trainingSet)
Mrandom <- train(Volume ~ x4StarReviews, data = List$trainingSet, method = "rf",trainControl=trainControl(method = "repeatedcv", repeats = 4))
Mrandom
ModelRandomForest
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~ x4StarReviews,List$trainingSet)
TrainingFunction <- function(method,formula,data,tune=4,c=1000,gamma=0.0001)
{
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune,
preProcess = c("center", "scale"))  # OR "RANGE"
}
else if (method == "svm"){
# preprocess externally
Model <- svm(formula, data = data,cost=c , gamma = gamma)
}
return(Model)
}
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~ x4StarReviews,List$trainingSet)
ModelRandomForest
PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)
TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)
TestResultsRF
svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,100000,0.00001)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
TestResultsSVM
KNN <- TrainingFunction("knn",Volume~.,List$trainingSet)
TestResultsKNN <-postResample(KnnPrediction,List$testingSet$Volume)
TestResultsKNN
KnnPrediction <- predict(KNN,List$testingSet)
TestResultsKNN <-postResample(KnnPrediction,List$testingSet$Volume)
TestResultsKNN
ABSrf <- List$testingSet$Volume - PredictionRandomForest
RLTrf <- ABSrf / List$testingSet$Volume
ABsKnn <- List$testingSet$Volume - KnnPrediction
RLTknn <- ABsKnn / List$testingSet$Volume
ABSsvm <-  List$testingSet$Volume - svm.pred
RLTsvm <-  ABSsvm / List$testingSet$Volume
ABSrf <- as.data.frame(ABSrf)
ABSsvm <- as.data.frame(ABSsvm)
plot(ABSsvm)
ABsKnn <-as.data.frame(ABsKnn)
RealAndPrediction <- cbind(List$testingSet$Volume,ABsKnn)
RealAndPrediction
ErrorPlotKnn <- ggplot(data = RealAndPrediction , aes(x = ABs,y=RealAndPrediction$ABsKnn$Volume) ) + geom_point()
ErrorPlotKnn
ErrorPlotKnn
ErrorPlotKnn <- ggplot(data = RealAndPrediction , aes(x = Abs,y=RealAndPrediction$ABsKnn$Volume) ) + geom_point()
ErrorPlotKnn
a <- c("Volume ~ x4StarReviews","Volume ~.","Volume ~ PositiveServiceReview")
b <- c("rf", "knn")
compare_var_mod <- c()
for ( i   in a) {
for (j in b) {
model <- train(formula(i), data = List$trainingSet, method = b,trainControl=trainControl(method = "repeatedcv", repeats = 4))
pred <- predict(model, newdata = List$testingSet)
pred_metric <- postResample(List$testingSet$Volume, pred)
compare_var_mod <- cbind(compare_var_mod , pred_metric)
}
}
compare_var_mod
names_var <- c()
for (i in a) {
for(j in b) {
names_var <- append(names_var,paste(i,j))
}
}
names_var
colnames(compare_var_mod) <- names_var
compare_var_mod
compare_var_mod_melt <- melt(compare_var_mod, varnames = c("metric", "model"))
compare_var_mod_melt <- as.data.frame(compare_var_mod_melt)
compare_var_mod_melt
ggplot(compare_var_mod_melt, aes(x=model,y=value)) + geom_col() + facet_grid(metric~., scales="free")
TrainAll3Models(Volume ~ x4StarsReview + PositiveServiceReview,EP)
TrainAll3Models(Volume ~ x4StarReviews + PositiveServiceReview,EP)
List3models <- lTrainAll3Models(Volume ~ x4StarReviews + PositiveServiceReview,EP)
List3models <- TrainAll3Models(Volume ~ x4StarReviews + PositiveServiceReview,EP)
List3models
List3models[[1]]
View(List3models)
#### Pre Process ####
PPfunction <- function(data) {
N <- dummyVars(" ~ .", data = data)
N <- data.frame(predict(N, newdata = data))
N <- N[,colSums(is.na(N)) == 0]
N
}
# How to apply :  , need dplyr package
# EP[2:4] <- apply(EP[2:4],2,normFunc)
#### Removing Outliers ####
RmOut <- function(D,V)
{
Out <- boxplot(D$V ,plot = FALSE)$out
K <- D[-which(D$V %in% Out),]
K
}
L <- RmOut(EP,Volume)
###
MyPlotFunction <- function(data,variable=0,variable2=0)
{
if (variable2 == 0)
{
G <- ggplot(data,aes(x= data[[variable]]) ) +
geom_bar()+ labs( x = variable)
}
else
G <- ggplot(data,aes(data,x= data[[variable]],y= data[[variable2]])) +
geom_bar(stat = "Identity") +
labs(x = variable,y=variable2 , title = 'Bar Plot' )
G
}
###
SubSetDataProductTypes <- function(data,p,p1 = 0,p2 = 0 , p3 = 0 , p4 = 0)
{
if ( p1 == 0 && p2 == 0 && p3 == 0 && p4 == 0)
{
Nsub <- subset(data, data$ProductType == p)
return(Nsub)
}
else if (p2 == 0 && p3 == 0 && p4 == 0){
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub2 <- rbind(Nsub,Nsub2)
return(Nsub2)
}
else  if (p3 == 0 && p4 == 0)
{
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub3 <- subset(data,data$ProductType == p2)
Nsub3 <- rbind(Nsub,Nsub2,Nsub3)
return(Nsub3)
}
else  if (p4 == 0){
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub3 <- subset(data,data$ProductType == p2)
Nsub4 <- subeset(data,data$ProductType == p3)
Nsub4 <- rbind(Nsub,Nsub2,Nsub3,Nsub4)
return(Nsub4)
}
else{
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub3 <- subset(data,data$ProductType == p2)
Nsub4 <- subeset(data,data$ProductType == p3)
Nsub5 <- subset(data,data$ProductType == p4)
Nsub5 <- rbind(Nsub,Nsub2,Nsub3,Nsub4,Nsub5)
return(Nsub5)
}
}
#### Train and Test Set function ####
TrainAndTestSets <- function(label,p,data,seed){
set.seed(seed)
inTrain <- createDataPartition(y= label, p = p , list = FALSE)
training <- data[inTrain,]
testing <- data[-inTrain,]
list(trainingSet=training,testingSet = testing)
}
# EP <- PPfunction(EP)
# EP <- RmOut(EP)
# corr_all <- cor(EP)
#
# corrplot(corr_all)
#### Training Functions ####
TrainingFunction <- function(method,formula,data,tune=4,c=1000,gamma=0.0001)
{
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune,
preProcess = c("center", "scale"))  # OR "RANGE"
}
else if (method == "svm"){
# preprocess externally
Model <- svm(formula, data = data,cost=c , gamma = gamma)
}
return(Model)
}
#### Al 3 models at once ####
TrainAll3Models <- function (formula,data)
{
Model <- vector(mode="list", length=length(methods))
methods <- c("rf","svm","knn")
for(i in 1:length(methods))
{
Model[[i]] <- TrainingFunction(methods[i],formula,data,5)
}
Model
}
#
# CompareMetrics <- function(Models,data)
#   {
#
#
#   {
#     comp_model <- c()
#
#
#     methods <- c("rf","svm","knn")
#
#     for(i in 1:length(methods))
#     {
#
#       Model <- TrainingFunction(methods[i],formula,data,5)
#
#
#       prediction  <- predict(Model,)
#
#       metric <- (Model,)
#
#       comp_model <- cbind(metric,comp-model)
#
#
#       }
#
#
#
#
#
#   }
#  }
#
#
# Models<- TrainAll3Models(Volume~.,EP)
#
#
# PredictionRf <- predict(Models[1],List$testingSet)
#
# postResample(PredictionRf,List$testingSet$Volume)
# PredictionRf
# List$testingSet$Volume
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
library(reshape)
library(corrplot)
#For cleaning variables
#rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
#### Pre Processing ####
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP,Volume)
#
# EP
# corr_all <- cor(EP)
# corr_all
#
# corrplot(corr_all,type="upper",tl.pos="td",method="circle",tl.cex = 0.5,tl.col='black',diag=FALSE)
#### Training and Testing sets ####
List <- TrainAndTestSets(EP$Volume,0.75,EP,123)
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~ x4StarReviews,List$trainingSet)
# Mrandom <- train(Volume ~ x4StarReviews, data = List$trainingSet, method = "rf",trainControl=trainControl(method = "repeatedcv", repeats = 4))
PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)
TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)
TestResultsRF
#### SVM ####
svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,100000,0.00001)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
TestResultsSVM
#### knn ####
KNN <- TrainingFunction("knn",Volume~.,List$trainingSet)
# KnnList <- TrainAndTestSets(EP$Volume,0.75,EP,233)
KnnPrediction <- predict(KNN,List$testingSet)
TestResultsKNN <-postResample(KnnPrediction,List$testingSet$Volume)
TestResultsKNN
####
AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)
AllTestResults
#### Training All 3 models at once ####
#TrainAll3Models(Volume ~.,List$trainingSet)
#### Errors ####
ABSrf <- List$testingSet$Volume - PredictionRandomForest
RLTrf <- ABSrf / List$testingSet$Volume
ABsKnn <- List$testingSet$Volume - KnnPrediction
RLTknn <- ABsKnn / List$testingSet$Volume
ABSsvm <-  List$testingSet$Volume - svm.pred
RLTsvm <-  ABSsvm / List$testingSet$Volume
ABSrf <- as.data.frame(ABSrf)
ABSsvm <- as.data.frame(ABSsvm)
plot(ABSsvm)
ABsKnn <-as.data.frame(ABsKnn)
RealAndPrediction <- cbind(List$testingSet$Volume,ABsKnn)
RealAndPrediction
ErrorPlotKnn <- ggplot(data = RealAndPrediction , aes(x = Abs,y=RealAndPrediction$ABsKnn$Volume) ) + geom_point()
ErrorPlotKnn
list_3_models <- TrainAll3Models(Volume ~ x4StarReviews + PositiveServiceReview,EP)
##### Best approach ( mentors)
a <- c("Volume ~ x4StarReviews","Volume ~.","Volume ~ PositiveServiceReview")
b <- c("rf", "knn")
compare_var_mod <- c()
for ( i   in a) {
for (j in b) {
model <- train(formula(i), data = List$trainingSet, method = b,trainControl=trainControl(method = "repeatedcv", repeats = 4))
pred <- predict(model, newdata = List$testingSet)
pred_metric <- postResample(List$testingSet$Volume, pred)
compare_var_mod <- cbind(compare_var_mod , pred_metric)
}
}
compare_var_mod
names_var <- c()
for (i in a) {
for(j in b) {
names_var <- append(names_var,paste(i,j))
}
}
names_var
colnames(compare_var_mod) <- names_var
compare_var_mod
compare_var_mod_melt <- melt(compare_var_mod, varnames = c("metric", "model"))
compare_var_mod_melt <- as.data.frame(compare_var_mod_melt)
compare_var_mod_melt
ggplot(compare_var_mod_melt, aes(x=model,y=value)) + geom_col() + facet_grid(metric~., scales="free")
# Efunction <- function (data,seed)
#   {
#
#   prediction <- vector(mode = "list", length = 3)
#   abs <- vector(mode="list", length=3)
#   rlt <- vector(mode="list", length=3)
#         List <- TrainAndTestSets(data$Volume,0.75,data,123)
#         #List <- TrainAndTestSets(EP$Volume,0.75,EP,233)
#    Model <- TrainAll3Models(Volume~.,List$trainingSet)
#     RealValue <-  List$testingSet$Volume
#                 for(i in 1:length(Model)){
#
#
#
#               prediction[[i]] <- predict(Model[i],List$testingSet)
#
#
#                   abs[[i]] <- abs(prediction[[i]] - List$testingSet$Volume)
#                  # rlt[[i]] <- abs[i]/ List$testingSet$Volume[i]
#
#                 }
#
#    list(AbsoluteE=abs,RelativeE = rlt,predi=prediction)
#
# }
#
#
# O234 <- Efunction(EP,123)
# View(O234)
#
# summary(Model[2])
#
# Model1 <- Models[[1]]
#
# Model1
#
# prediction <- predict(Models[[1]],List$testingSet)
#
# summary(Models[2])
#
# postResample(prediction,List$testingSet$Volume)
#
#
#
# a <- c("knn","rf")
#
# compmodel <- c()
# for (i in a) {
#
#   model <- train(Volume~.,
#                  EP,method= a,
#                  train = List$trainingSet,
#                  trainControl = trainControl(method = "repeatedcv",
#                                              repeats = 4))
#
#   pred <- predict(model,List$testingSet)
#
#   metric <- postResample(pred,List$testingSet$Volume)
#
#
#
#    compmodel <- cbind(metric,compmodel)
#
# }
#   for (j in 1:2)
#     {
#     print(j)
#
#
#      colnames(compmodel)[j] <- a[j]
#
#
#     }
# compmodel
#
#
# a <- c("knn","rf")
#
#
#
#
# MyNewTable <- melt(compmodel,id=("Value"))
#
# MyNewTable
#   ggplot(MyNewTable,aes(x=X1,y=X2)) + geom_col() + facet_grid(X1 ~.,scales="free")
#
#
