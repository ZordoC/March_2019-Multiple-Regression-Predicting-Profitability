newData <- predict(preObj, List$trainingSet[,c("PostiveServiceReview","Volume","x4StarReviews") ])
preObj <- preProcess(List$trainingSet[, c("PostiveServiceReview","Volume","x4StarReviews")], method=c("center", "scale"))
preObj <- preProcess(List$trainingSet[, c(13,14,15)], method=c("center", "scale"))
newData <- predict(preObj, List$trainingSet[,c("PostiveServiceReview","Volume","x4StarReviews") ])
newData <- predict(preObj, List$trainingSet[,c(13,14,15) ])
View(newData)
preObj <- preProcess(List$trainingSet[, c(13,14,15)], method=c("center", "scale"))
newData <- predict(preObj, List$trainingSet)
View(newData)
TrainingFunction <- function(formula,data,method,tune)
{
method <- readline("What is the method you are going to use ? (knn,rf,svm) ")
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
preObj <- preProcess(data[, c(13,14,15)], method=c("center", "scale"))
data <- predict(preObj, data)
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "svm"){
Model <- svm(formula. , data = data,cost=1000 , gamma = 0.001)
}
Model
}
TrainingFunction <- function(formula,data,tune)
{
method <- readline("What is the method you are going to use ? (knn,rf,svm) ")
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
preObj <- preProcess(data[, c(13,14,15)], method=c("center", "scale"))
data <- predict(preObj, data)
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "svm"){
Model <- svm(formula. , data = data,cost=1000 , gamma = 0.001)
}
Model
}
Model <- TrainingFunction(Volume~.,List$trainingSet,5)
Model
Model <- TrainingFunction(Volume~.,List$trainingSet,5)
Model
Model <- TrainingFunction(Volume~.,List$trainingSet,5)
TrainingFunction <- function(formula,data,tune)
{
method <- readline("What is the method you are going to use ? (knn,rf,svm) ")
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
preObj <- preProcess(data[, c(13,14,15)], method=c("center", "scale"))
data <- predict(preObj, data)
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "svm"){
Model <- svm(formula, data = data,cost=1000 , gamma = 0.001)
}
Model
}
Model <- TrainingFunction(Volume~.,List$trainingSet,5)
Model
Summary(Model)
summary(Model)
svm.model <- svm(Volume ~ . , data = List$trainingSet,cost=1000 , gamma = 0.001)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
#For cleaning variables
rm(list = setdiff(ls(), lsf.str()))
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
#For cleaning variables
# rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
EP <- PPfunction(EP)
EP <- RmOut(EP)
List <- TrainAndTestSets(EP$Volume,0.75,EP,233)
TrainingFunction <- function(method,formula,data,tune)
{
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
preObj <- preProcess(data[, c(13,14,15)], method=c("center", "scale"))
data <- predict(preObj, data)
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "svm"){
Model <- svm(formula, data = data,cost=1000 , gamma = 0.001)
}
Model
}
Model <- TrainingFunction("knn",Volume~.,List$trainingSet,5)
methods <- c("rf","knn","svm")
for ( i in length(methods)) {
print(methods[i])
}
length(methods)
for ( i in length(methods)) {
print(methods[i])
}
for ( i in 1:length(methods))) {
print(methods[i])
}
for ( i in 1:length(methods)) {
print(methods[i])
}
TrainAll3Models <- function (formula,data)
{
Model <- vector(mode="list", length=lenght(methods))
methods <- c("rf","knn","svm")
for(i in 1:length(methods))
{
Model[i] <- TrainingFunction(methods,formula,data)
}
Model
}
TrainAll3Models(Volume~.,List$trainingSet)
TrainAll3Models <- function (formula,data)
{
Model <- vector(mode="list", length=length(methods))
methods <- c("rf","knn","svm")
for(i in 1:length(methods))
{
Model[i] <- TrainingFunction(methods,formula,data)
}
Model
}
TrainAll3Models(Volume~.,List$trainingSet)
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
TrainAll3Models <- function (formula,data)
{
Model <- vector(mode="list", length=length(methods))
methods <- c("rf","knn","svm")
for(i in 1:length(methods))
{
Model[i] <- TrainingFunction(methods,formula,data)
}
Model
}
TrainAll3Models(Volume~.,List$trainingSet)
TrainAll3Models <- function (formula,data)
{
Model <- vector(mode="list", length=length(methods))
methods <- c("rf","knn","svm")
for(i in 1:length(methods))
{
Model[i] <- TrainingFunction(methods[i],formula,data)
}
Model
}
TrainAll3Models(Volume~.,List$trainingSet)
methods <- c("rf","knn","svm")
for(i in 1:length(methods))
{
Model[i] <- TrainingFunction(methods[i],formula,data)
}
Model
for(i in 1:length(methods))
{
Model[i] <- TrainingFunction(methods[i],formula,data)
}
Model
Model
rm(Model)
Model
Model <- Model()
Model <- vector()
methods <- c("rf","knn","svm")
for(i in 1:length(methods))
{
Model[i] <- TrainingFunction(methods[i],Volume~.,List$trainingSet)
}
Model <- vector(mode = "list" , length = length(methods))
for(i in 1:length(methods))
{
Model[i] <- TrainingFunction(methods[i],Volume~.,List$trainingSet)
}
Model[i] <- TrainingFunction("rf",Volume~.,List$trainingSet)
Model <- TrainingFunction("rf",Volume~.,List$trainingSet)
Model <- TrainingFunction("rf",Volume~.,List$trainingSet,5)
Model <- vector(mode = "list" , length = length(methods))
View(Model)
Model <- vector(mode = "list" , length = length(methods))
for(i in 1:length(methods))
{
Model[i] <- TrainingFunction("rf",Volume~.,List$trainingSet,5)
}
View(Model)
View(Model)
View(List)
View(Model)
Model[[1]]
#For cleaning variables
rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)
List <- TrainAndTestSets(EP$Volume,0.75,EP,233)
Model <- vector(mode = "list" , length = length(methods))
for(i in 1:length(methods))
{
Model[i] <- TrainingFunction("rf",Volume~.,List$trainingSet,5)
}
View(Model)
Model[[1]]
for(i in 1:length(methods))
{
Model[i] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
methods <- c("rf","knn","svm")
Model <- vector(mode = "list" , length = length(methods))
for(i in 1:length(methods))
{
Model[i] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
Model <- vector(mode = "list" , length = 3)
for(i in 1:3)
{
Model[i] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
Models <- vector(mode = "list" , length = 3)
for(i in 1:3)
{
Models[i] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
Models
#For cleaning variables
rm(list = setdiff(ls(), lsf.str()))
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
#For cleaning variables
# rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
EP <- EP[,c(1,5,9,18)]
#### Pre Processing ####
EP <- PPfunction(EP)
EP <- RmOut(EP)
List <- TrainAndTestSets(EP$Volume,0.75,EP,233)
ModelRandomForest <- TrainingFunction("rf",Volume~.,List$trainingSet,5)
KNN <- TrainingFunction("knn",Volume~.,List$trainingSet,5)
svm.model <- TrainingFunction("knn",Volume,List$trainingSet,5)
svm.model <- TrainingFunction("knn",Volume~.,List$trainingSet,5)
PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)
TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)
KnnPrediction <- predict(KNN,ListK$testingSet)
KnnPrediction <- predict(KNN,List$testingSet)
TestResultsKNN <-postResample(KnnPrediction,ListK$testingSet$Volume)
TestResultsKNN <-postResample(KnnPrediction,List$testingSet$Volume)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)
AllTestResults
View(knn)
View(KnnPrediction)
#For cleaning variables
rm(list = setdiff(ls(), lsf.str()))
ModelRandomForest <- TrainingFunction("rf",Volume~.,List$trainingSet,5)
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
#For cleaning variables
# rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)
List <- TrainAndTestSets(EP$Volume,0.75,EP,233)
ListTest <-TrainAndTestSets(EP$Volume,0.75,EP,233)
ModelRandomForest <- TrainingFunction("rf",Volume~.,List$trainingSet,5)
svm.model <- TrainingFunction("knn",Volume~.,List$trainingSet,5)
KNN <- TrainingFunction("knn",Volume~.,List$trainingSet,5)
summary(KNN)
summary(ModelRandomForest)
ModelRandomForest
KNN
svm.model
svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,5)
svm.model
View(List)
View(ListTest)
View(List)
PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)
PredictionRandomForest
TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)
TestResultsRF
KnnPrediction <- predict(KNN,List$testingSet)
View(KNN)
View(KNN)
View(List)
KnnPrediction <- predict(KNN,List$testingSet)
TestResultsKNN <-postResample(KnnPrediction,List$testingSet$Volume)
TestResultsKNN <-postResample(KnnPrediction,List$testingSet$Volume)
TestResultsKNN
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)
AllTestResults
preObj <- preProcess(data[, c(13,14,15)], method=c("center", "scale"))
data <- predict(preObj, data)
preObj <- preProcess(EP[, c(13,14,15)], method=c("center", "scale"))
data <- predict(preObj, EP)
View(data)
TestResultsKNN <-postResample(KnnPrediction,data$Volume)
KnnList <- TrainAndTestSets(Volume,0.75,data,233)
KnnList <- TrainAndTestSets(data$Volume,0.75,data,233)
preObj <- preProcess(EP[, c(13,14,15)], method=c("center", "scale"))
data <- predict(preObj, EP)
KnnList <- TrainAndTestSets(data$Volume,0.75,data,233)
KNN <- TrainingFunction("knn",Volume~.,KnnList$trainingSet,5)
#For cleaning variables
rm(list = setdiff(ls(), lsf.str()))
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
#For cleaning variables
# rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
#### Pre Processing ####
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)
#### Training and Testing sets ####
List <- TrainAndTestSets(EP$Volume,0.75,EP,233)
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~.,List$trainingSet,5)
PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)
TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)
#### SVM ####
svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,5)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
#### knn ####
preObj <- preProcess(EP[, c(13,14,15)], method=c("center", "scale"))
data <- predict(preObj, EP)
KnnList <- TrainAndTestSets(data$Volume,0.75,data,233)
KNN <- TrainingFunction("knn",Volume~.,KnnList$trainingSet,5)
KnnPrediction <- predict(KNN,List$testingSet)
TestResultsKNN <-postResample(KnnPrediction,data$Volume)
####
AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)
AllTestResults
TrainingFunction <- function(method,formula,data,tune,cost = 1000 , gamma = 0.001)
{
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
preObj <- preProcess(data[, c(13,14,15)], method=c("center", "scale"))
data <- predict(preObj, data)
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "svm"){
Model <- svm(formula, data = data,cost=cost , gamma = gamma)
}
Model
}
#For cleaning variables
rm(list = setdiff(ls(), lsf.str()))
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
#For cleaning variables
# rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
#### Pre Processing ####
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)
#### Training and Testing sets ####
List <- TrainAndTestSets(EP$Volume,0.75,EP,233)
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~.,List$trainingSet,5)
PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)
TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)
#### SVM ####
svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,5,100000,0.0001)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
#### knn ####
preObj <- preProcess(EP[, c(13,14,15)], method=c("center", "scale"))
data <- predict(preObj, EP)
KnnList <- TrainAndTestSets(data$Volume,0.75,data,233)
KNN <- TrainingFunction("knn",Volume~.,KnnList$trainingSet,5)
KnnPrediction <- predict(KNN,List$testingSet)
TestResultsKNN <-postResample(KnnPrediction,data$Volume)
####
AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)
AllTestResults
#### Train and Test Set function ####
TrainAndTestSets <- function(label,p,data,seed){
set.seed(seed)
inTrain <- createDataPartition(y= label, p = p , list = FALSE)
training <- data[inTrain,]
testing <- data[-inTrain,]
list(trainingSet=training,testingSet = testing)
}
#### Training Functions ####
TrainingFunction <- function(method,formula,data,tune)
{
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
preObj <- preProcess(data[, c(13,14,15)], method=c("center", "scale"))
data <- predict(preObj, data)
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "svm"){
Model <- svm(formula, data = data,cost=1000 , gamma = 0.001)
}
Model
}
# TrainAll3Models <- function (formula,data)
#   {
#
#   Model <- vector(mode="list", length=length(methods))
#
#       methods <- c("rf","knn","svm")
#
#           for(i in 1:length(methods))
#             {
#
#             Model[i] <- TrainingFunction(methods[i],formula,data)
#
#
#             }
#       Model
#
#
#
#       }
#
# methods <- c("rf","knn","svm")
#
# Models <- vector(mode = "list" , length = 3)
#
# for(i in 1:3)
# {
#
#   Models[i] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
#
#
# }
#
source('~/Documents/Ubiqum/R-Task3/Scripts/functions.R')
source('~/Documents/Ubiqum/R-Task3/Scripts/ModelFunctions.R')
source('~/Documents/Ubiqum/R-Task3/Scripts/Process.R')
source('~/Documents/Ubiqum/R-Task3/Scripts/Process.R')
source('~/Documents/Ubiqum/R-Task3/Scripts/functions.R')
source('~/Documents/Ubiqum/R-Task3/Scripts/ModelFunctions.R')
