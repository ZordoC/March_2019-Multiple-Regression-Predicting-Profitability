dataset <- read.csv(/home/zordo/Documents/DataThon/X.csv)
dataset <- read.csv("/home/zordo/Documents/DataThon/X.csv")
View(dataset)
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("MCMCglm")
install.packages('caret', dependencies = TRUE)
library(caret)
install.packages('caret', dependencies = TRUE)
library(caret)
library(caret)
library(readr)
N <- dummyVars ()
ReadCharFunc <- function(data,word)
{
for ( i in  1:nrow(data))
{
rows <- paste(data[i,],collapse='')
if(grepl(word,rows))
{
print("True")
}
}
for ( i in 1:ncol(data))
{
columns <- paste(data[,i],collapse='')
if(grepl(word,columns ))
{
print("True")
}
}
}
r1<- c("A","B","C","D")
r2 <- c("E","F","G","H")
r3 <- c("I","J","K","L")
r4 <- c("M","N","O","P")
Mytable <- rbind(r1,r2,r3,r4)
ReadCharFunc(Mytable,"ABC")
ReadCharFunc(Mytable,"DDD")
ReadCharFunc <- function(data,word)
{
for ( i in  1:nrow(data))
{
rows <- paste(data[i,],collapse='')
if(grepl(word,rows))
{
print("True")
}
}
for ( i in 1:ncol(data))
{
columns <- paste(data[,i],collapse='')
if(grepl(word,columns ))
{
print("True")
}
}
else { print("False")}
}
ReadCharFunc <- function(data,word)
{
for ( i in  1:nrow(data))
{
rows <- paste(data[i,],collapse='')
if(grepl(word,rows))
{
print("True")
}
}
for ( i in 1:ncol(data))
{
columns <- paste(data[,i],collapse='')
if(grepl(word,columns ))
{
print("True")
}
}
else { print("False")
}
}
ReadCharFunc <- function(data,word)
{
for ( i in  1:nrow(data))
{
rows <- paste(data[i,],collapse='')
if(grepl(word,rows))
{
print("True")
}
}
for ( i in 1:ncol(data))
{
columns <- paste(data[,i],collapse='')
if(grepl(word,columns ))
{
print("True")
}
}
else  print("False")
}
ReadCharFunc <- function(data,word)
{
for ( i in  1:nrow(data))
{
rows <- paste(data[i,],collapse='')
if(grepl(word,rows))
{
print("True")
}
}
for ( i in 1:ncol(data))
{
columns <- paste(data[,i],collapse='')
if(grepl(word,columns ))
{
print("True")
}
}
else  {
print("False")
}
}
ReadCharFunc <- function(data,word)
{
for ( i in  1:nrow(data))
{
rows <- paste(data[i,],collapse='')
if(grepl(word,rows))
{
print("True")
}
}
for ( i in 1:ncol(data))
{
columns <- paste(data[,i],collapse='')
if(grepl(word,columns ))
{
print("True")
}
}
else  {
print("False")
}
}
ReadCharFunc <- function(data,word)
{
for ( i in  1:nrow(data))
{
rows <- paste(data[i,],collapse='')
if(grepl(word,rows))
{
exist<-1
print("True")
}
}
for ( i in 1:ncol(data))
{
columns <- paste(data[,i],collapse='')
if(grepl(word,columns ))
{
exist <- 1
print("True")
}
}
if(exist == 0){
print("False")
}
}
ReadCharFunc(Mytable,"DDD")
ReadCharFunc <- function(data)
{
word<-readline(prompt = "Enter your word: ")
exist<-0
for ( i in  1:nrow(data))
{
rows <- paste(data[i,],collapse='')
if(grepl(word,rows))
{
exist<-1
print("True")
}
}
for ( i in 1:ncol(data))
{
columns <- paste(data[,i],collapse='')
if(grepl(word,columns ))
{
exist <- 1
print("True")
}
}
if(exist == 0){
print("False")
}
}
ReadCharFunc(Mytable,"DDD")
ReadCharFunc <- function(data)
{
word<-readline(prompt = "Enter your word: ")
exist<-0
for ( i in  1:nrow(data))
{
rows <- paste(data[i,],collapse='')
if(grepl(word,rows))
{
exist<-1
print("True")
}
}
for ( i in 1:ncol(data))
{
columns <- paste(data[,i],collapse='')
if(grepl(word,columns ))
{
exist <- 1
print("True")
}
}
if(exist == 0){
print("False")
}
}
ReadCharFunc(Mytable)
ReadCharFunc(Mytable)
ReadCharFunc(Mytable)LLKDS
ReadCharFunc(Mytable)
TrainAllModels <- function (formula,data)
{
Model <- vector(mode="list", length=length(methods))
methods <- c("rf","svm","knn")
for(i in 1:length(methods))
{
for(j in 1:length(formula))
{
Model[[i]] <- TrainingFunction(methods[i],formula[j],data,5)
}
}
Model
}
methods <- c("rf","svm","knn")
formula <- c("Volume~.,Volume~x4StarReviews,Volume~PositiveServiceReview")
formula <- c("Volume~.,Volume~x4StarReviews,Volume~PositiveServiceReview")
methods <- c("rf","svm","knn")
TrainAllModelsWithAllVariables <- function (data,methods,formula)
{
Model <- vector(mode="list", length=length(methods))
for(i in 1:length(methods))
{
for(j in 1:length(formula))
{
Model[[i]] <- TrainingFunction(methods[i],formula[j],data,5)
}
}
Model
}
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
library(reshape)
library(corrplot)
#For cleaning variables
#rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
#### Pre Processing ####
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)
PPfunction <- function(data) {
N <- dummyVars(" ~ .", data = data)
N <- data.frame(predict(N, newdata = data))
N <- N[,colSums(is.na(N)) == 0]
N
}
# How to apply :  , need dplyr package
# EP[2:4] <- apply(EP[2:4],2,normFunc)
#### Removing Outliers ####
RmOut <- function(D,V)
{
Out <- boxplot(D$V ,plot = FALSE)$out
K <- D[-which(D$V %in% Out),]
K
}
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
library(reshape)
library(corrplot)
#For cleaning variables
#rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
#### Pre Processing ####
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)
TrainingFunction <- function(method,formula,data,tune,c=1000,gamma=0.0001)
{
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune,
preProcess = c("center", "scale"))
}
else if (method == "svm"){
Model <- svm(formula, data = data,cost=c , gamma = gamma)
}
else {
Model <- train(formula,data=data,tuneLength = tune,trcontrol=fitcontrol)
}
return(Model)
}
TrainAllModelsWithAllVariable(EP,methods,formula)
TrainAllModelsWithAllVariables <- function (data,methods,formula)
{
Model <- vector(mode="list", length=length(methods))
for(i in 1:length(methods))
{
for(j in 1:length(formula))
{
Model[[i]] <- TrainingFunction(methods[i],formula[j],data,5)
}
}
Model
}
TrainingFunction <- function(method,formula,data,tune,c=1000,gamma=0.0001)
{
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune,
preProcess = c("center", "scale"))
}
else if (method == "svm"){
Model <- svm(formula, data = data,cost=c , gamma = gamma)
}
else {
Model <- train(formula,data=data,trcontrol=fitcontrol,tuneLength = tune)
}
return(Model)
}
TrainAllModelsWithAllVariable(EP,methods,formula)
TrainAllModelsWithAllVariables(EP,methods,formula)
formula <- c("Volume~.","Volume~x4StarReviews","Volume~PositiveServiceReview")
methods <- c("rf","svm","knn")
TrainAllModelsWithAllVariables(EP,methods,formula)
TrainAllModelsWithAllVariables <- function (data,methods,formula)
{
Model <- vector(mode="list", length=length(methods))
for(i in 1:length(methods))
{
for(j in 1:length(formula))
{
Model[[i]] <- TrainingFunction(methods[i],formula[j],data,5)
}
}
Model
}
TrainAllModelsWithAllVariables(EP,methods,formula)
TrainingFunction <- function(method,formula,data,tune,c=1000,gamma=0.0001)
{
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune,
preProcess = c("center", "scale"))
}
else if (method == "svm"){
Model <- svm(formula, data = data,cost=c , gamma = gamma)
}
# else {
#
#
#   Model <- train(formula,data=data,trcontrol=fitcontrol,tuneLength = tune)
#
#
# }
return(Model)
}
formula <- c("Volume~.","Volume~x4StarReviews","Volume~PositiveServiceReview")
methods <- c("rf","svm","knn")
TrainAllModelsWithAllVariables <- function (data,methods,formula)
{
Model <- vector(mode="list", length=length(methods))
for(i in 1:length(methods))
{
for(j in 1:length(formula))
{
Model[[i]] <- TrainingFunction(methods[i],formula[j],data,5)
}
}
Model
}
TrainAllModelsWithAllVariables(EP,methods,formula)
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
library(reshape)
library(corrplot)
formula <- c("Volume~.","Volume~x4StarReviews","Volume~PositiveServiceReview")
methods <- c("rf","svm.linear","knn")
TrainAllModelsWithAllVariables <- function (data,methods,formula)
{
Model <- vector(mode="list", length=length(methods))
for(i in 1:length(methods))
{
for(j in 1:length(formula))
{
Model[[i]] <- TrainingFunction(methods[i],formula[j],data,5)
}
}
Model
}
TrainAllModelsWithAllVariables(EP,methods,formula)
TrainAllModelsWithAllVariables(EP,methods,formula)
TrainAllModelsWithAllVariables(EP,methods,formula)
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
library(reshape)
library(corrplot)
#library(prettydoc)
#
#
#For cleaning variables
#rm(list = setdiff(ls(), lsf.str()))
#current_path = getActiveDocumentContext()$path
#setwd(dirname(current_path))
#setwd("..")
#rm(current_path)
EP <- read.csv( file ="/home/zordo/Documents/Ubiqum/R-Task3/data/Epa.csv" , header = TRUE , sep = ',')
#current_path = getActiveDocumentContext()$path
#setwd(dirname(current_path))
#setwd("..")
#rm(current_path)
EP <- read.csv( file ="/home/zordo/Documents/Ubiqum/R-Task3/data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "/home/zordo/Documents/Ubiqum/R-Task3/data/Npa.csv", header = TRUE , sep =',')
