else  if (p4 == 0){
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub3 <- subset(data,data$ProductType == p2)
Nsub4 <- subeset(data,data$ProductType == p3)
Nsub4 <- rbind(Nsub,Nsub2,Nsub3,Nsub4)
return(Nsub4)
}
else{
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub3 <- subset(data,data$ProductType == p2)
Nsub4 <- subeset(data,data$ProductType == p3)
Nsub5 <- subset(data,data$ProductType == p4)
Nsub5 <- rbind(Nsub,Nsub2,Nsub3,Nsub4,Nsub5)
return(Nsub5)
}
}
#### I know it's not the most pretty or effective way to do this, but it works.
EP <- PPfunction(EP)
EP <- RmOut(EP,Volume)
corr_all<-cor(EP)
corr_all
corrplot::corrplot(corr_all)
#corrplot(corr_all,type="upper",tl.pos="td",method="circle",tl.cex = 0.5,tl.col='black',diag=FALSE)
EP <- PPfunction(EP)
EP <- RmOut(EP,Volume)
corr_all<-cor(EP)
corr_all
corrplot::corrplot(corr_all,type="upper",tl.pos="td",method="circle",tl.cex = 0.5,tl.col='black',diag=FALSE)
EP <- PPfunction(EP)
EP <- RmOut(EP,Volume)
corr_all<-cor(EP)
corrplot::corrplot(corr_all,type="upper",tl.pos="td",method="circle",tl.cex = 0.5,tl.col='black',diag=FALSE)
corrplot:: corrplot(corr_all,type="upper",tl.pos="td",method="circle",tl.cex = 0.5,tl.col='black',diag=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
library(reshape)
library(corrplot)
#library(prettydoc)
#
#
#For cleaning variables
#rm(list = setdiff(ls(), lsf.str()))
#current_path = getActiveDocumentContext()$path
#setwd(dirname(current_path))
#setwd("..")
#rm(current_path)
EP <- read.csv( file ="/home/zordo/Documents/Ubiqum/R-Task3/data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "/home/zordo/Documents/Ubiqum/R-Task3/data/Npa.csv", header = TRUE , sep =',')
EP <- PPfunction(EP)
EP <- RmOut(EP,Volume)
corr_all<-cor(EP)
corrplot:: corrplot(corr_all,type="upper",tl.pos="td",method="circle",tl.cex = 0.5,tl.col='black',diag=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
library(reshape)
library(corrplot)
#library(prettydoc)
#
#
#For cleaning variables
#rm(list = setdiff(ls(), lsf.str()))
#current_path = getActiveDocumentContext()$path
#setwd(dirname(current_path))
#setwd("..")
#rm(current_path)
EP <- read.csv( file ="/home/zordo/Documents/Ubiqum/R-Task3/data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "/home/zordo/Documents/Ubiqum/R-Task3/data/Npa.csv", header = TRUE , sep =',')
PPfunction <- function(data) {
N <- dummyVars(" ~ .", data = data)
N <- data.frame(predict(N, newdata = data))
N <- N[,colSums(is.na(N)) == 0]
N
}
RmOut <- function(D,V)
{
Out <- boxplot(D$V ,plot = FALSE)$out
K <- D[-which(D$V %in% Out),]
K
}
RmOut <- function(D,V)
{
Out <- boxplot(D$V ,plot = FALSE)$out
K <- D[-which(D$V %in% Out),]
K
}
SubSetDataProductTypes <- function(data,p,p1 = 0,p2 = 0 , p3 = 0 , p4 = 0)
{
if ( p1 == 0 && p2 == 0 && p3 == 0 && p4 == 0)
{
Nsub <- subset(data, data$ProductType == p)
return(Nsub)
}
else if (p2 == 0 && p3 == 0 && p4 == 0){
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub2 <- rbind(Nsub,Nsub2)
return(Nsub2)
}
else  if (p3 == 0 && p4 == 0)
{
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub3 <- subset(data,data$ProductType == p2)
Nsub3 <- rbind(Nsub,Nsub2,Nsub3)
return(Nsub3)
}
else  if (p4 == 0){
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub3 <- subset(data,data$ProductType == p2)
Nsub4 <- subeset(data,data$ProductType == p3)
Nsub4 <- rbind(Nsub,Nsub2,Nsub3,Nsub4)
return(Nsub4)
}
else{
Nsub <- subset(data, data$ProductType == p)
Nsub2 <-subset(data, data$ProductType == p1)
Nsub3 <- subset(data,data$ProductType == p2)
Nsub4 <- subeset(data,data$ProductType == p3)
Nsub5 <- subset(data,data$ProductType == p4)
Nsub5 <- rbind(Nsub,Nsub2,Nsub3,Nsub4,Nsub5)
return(Nsub5)
}
}
#### I know it's not the most pretty or effective way to do this, but it works.
EP <- PPfunction(EP)
EP <- RmOut(EP,Volume)
corr_all<-cor(EP)
corrplot:: corrplot(corr_all,type="upper",tl.pos="td",method="circle",tl.cex = 0.5,tl.col='black',diag=FALSE)
TrainAndTestSets <- function(label,p,data,seed){
set.seed(seed)
inTrain <- createDataPartition(y= label, p = p , list = FALSE)
training <- data[inTrain,]
testing <- data[-inTrain,]
list(trainingSet=training,testingSet = testing)
}
EP <- EP[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,18,20,21,22,23,24,25,26,27,28)]
List <- TrainAndTestSets(EP$Volume,0.75,EP,123)
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
Model <- train(Volume~., data = EP,method = "rf", trcontrol = fitcontrol , tunelenght = 5
, preProcess = c("center", "scale"),importance=T)
varImp(Model)
TrainingFunction <- function(method,formula,data,tune = 0,c=1000,gamma=0.0001)
{
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune,
preProcess = c("center", "scale"))
}
else if (method == "svm"){
Model <- svm(formula, data = data,cost=c , gamma = gamma)
}
return(Model)
}
EP <- read.csv( file ="/home/zordo/Documents/Ubiqum/R-Task3/data/Epa.csv" , header = TRUE , sep = ',')
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)
List <- TrainAndTestSets(EP$Volume,0.75,EP,123)
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~.,List$trainingSet,8)
PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)
TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)
#### SVM ####
svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,5,10000000,0.0000001)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
#### knn ####
KNN <- TrainingFunction("knn",Volume~.,List$trainingSet,11)
KnnPrediction <- predict(KNN,List$testingSet)
TestResultsKNN <-postResample(KnnPrediction,List$testingSet$Volume)
####
AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)
AllTestResults
TrainAll3Models <- function (formula,data)
{
Model <- vector(mode="list", length=length(methods))
methods <- c("rf","svm","knn")
for(i in 1:length(methods))
{
Model[[i]] <- TrainingFunction(methods[i],formula,data,5)
}
Model
}
a <- c("Volume ~ x4StarReviews","Volume ~.","Volume ~ PositiveServiceReview")
b <- c("rf", "knn")
compare_var_mod <- c()
for ( i   in a) {
for (j in b) {
model <- train(formula(i), data = List$trainingSet, method = b,trainControl=trainControl(method = "repeatedcv", repeats = 4))
pred <- predict(model, newdata = List$testingSet)
pred_metric <- postResample(List$testingSet$Volume, pred)
compare_var_mod <- cbind(compare_var_mod , pred_metric)
}
}
compare_var_mod
names_var <- c()
for (i in a) {
for(j in b) {
names_var <- append(names_var,paste(i,j))
}
}
names_var
colnames(compare_var_mod) <- names_var
compare_var_mod
compare_var_mod_melt <- melt(compare_var_mod, varnames = c("metric", "model"))
compare_var_mod_melt <- as.data.frame(compare_var_mod_melt)
compare_var_mod_melt
ggplot(compare_var_mod_melt, aes(x=model,y=value)) + geom_col() + facet_grid(metric~., scales="free") +theme(axis.text=element_text(size=5),
axis.title=element_text(size=14,face="bold"))
PredictionRandomForest
svm.pred
ABSrf <- as.data.frame(List$testingSet$Volume - PredictionRandomForest)
RLTrf <-  as.data.frame(ABSrf / List$testingSet$Volume)
ABSsvm <- as.data.frame(List$testingSet$Volume - svm.pred)
RLTsvm <- as.data.frame(ABSsvm / List$testingSet$Volume)
#abline(0, 0)                  # the horizon
ggplot(ABSrf,
aes(List$testingSetVolume,ABSrf))+
geom_point(color="red")+
geom_smooth()
View(List)
List$testingSet$Volume
ABSrf
View(ABSrf)
PloIT <- as.data.frame(List$testingSet$Volume)
ggplot(ABSrf,
aes(PloIT,ABSrf))+
geom_point(color="red")+
geom_smooth()
ABSrf <- (List$testingSet$Volume - PredictionRandomForest)
ggplot(ABSrf,
aes(List$testingSet$Volume,ABSrf))+
geom_point(color="red")+
geom_smooth()
ABSrf <- as.data.frame(List$testingSet$Volume - PredictionRandomForest)
Lol <- cbind(List$testingSet$Volume,ABSrf)
ggplot(Lol,
aes(Volume,ABSrf))+
geom_point(color="red")+
geom_smooth()
ggplot(Lol,
aes(Lol$Volume,ABSrf))+
geom_point(color="red")+
geom_smooth()
ABSrf <- as.data.frame(List$testingSet$Volume - PredictionRandomForest)
ABSrf <- (List$testingSet$Volume - PredictionRandomForest)
ggplot(Lol,
aes(Lol$Volume,ABSrf))+
geom_point(color="red")+
geom_smooth()
Lol$Volume
Lol <- cbind(List$testingSet$Volume,ABSrf)
Lol$Volume
List$testingSet$Volume
Lol <- cbind(List$testingSet,ABSrf)
ggplot(Lol,
aes(Lol$Volume,ABSrf))+
geom_point(color="red")+
geom_smooth()
PredictionRandomForest
svm.pred
ABSrf <- as.data.frame(List$testingSet$Volume - PredictionRandomForest)
RLTrf <-  as.data.frame(ABSrf / List$testingSet$Volume)
ABSsvm <- as.data.frame(List$testingSet$Volume - svm.pred)
RLTsvm <- as.data.frame(ABSsvm / List$testingSet$Volume)
#abline(0, 0)                  # the horizon
Lol$Volume
ggplot(Lol,
aes(Lol$Volume,ABSrf))+
geom_point(color="red")+
geom_smooth()
ggplot(Lol,
aes(Lol$Volume,RLTrf))+
geom_point(color="red")+
geom_smooth()
RLTrf <-  as.data.frame(ABSrf / List$testingSet$Volume)
ggplot(Lol,
aes(Lol$Volume,RLTrf))+
geom_point(color="red")+
geom_smooth()
PredictionRandomForest
svm.pred
ABSrf <- (List$testingSet$Volume - PredictionRandomForest)
RLTrf <-  as.data.frame(ABSrf / List$testingSet$Volume)
ABSsvm <- as.data.frame(List$testingSet$Volume - svm.pred)
RLTsvm <- as.data.frame(ABSsvm / List$testingSet$Volume)
#abline(0, 0)                  # the horizon
Lol <- cbind(List$testingSet,ABSrf)
List$testingSet$Volume
Lol$Volume
ggplot(Lol,
aes(Lol$Volume,ABSrf))+
geom_point(color="red")+
geom_smooth()
ggplot(Lol,
aes(Lol$Volume,RLTrf))+
geom_point(color="red")+
geom_smooth()
RLTrf <-  as.data.frame(ABSrf / List$testingSet$Volume)
View(RLTrf)
RLTrf <-  (ABSrf / List$testingSet$Volume)
ggplot(Lol,
aes(Lol$Volume,RLTrf))+
geom_point(color="red")+
geom_smooth()
PredictionRandomForest
svm.pred
ABSrf <- (List$testingSet$Volume - PredictionRandomForest)
RLTrf <-  (ABSrf / List$testingSet$Volume)
ABSsvm <- (List$testingSet$Volume - svm.pred)
RLTsvm <- (ABSsvm / List$testingSet$Volume)
#abline(0, 0)                  # the horizon
Lol <- cbind(List$testingSet,ABSrf)
#List$testingSet$Volume
ggplot(Lol,
aes(Lol$Volume,ABSrf))+
geom_point(color="red")+
geom_smooth()
ggplot(Lol,
aes(Lol$Volume,RLTrf))+
geom_point(color="red")+
geom_smooth()
EP <- read.csv( file ="/home/zordo/Documents/Ubiqum/R-Task3/data/Epa.csv" , header = TRUE , sep = ',')
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)
List <- TrainAndTestSets(EP$Volume,0.75,EP,123)
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~.,List$trainingSet,8)
PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)
TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)
#### SVM ####
svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,5,10000000,0.0000001)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
#### knn ####
KNN <- TrainingFunction("knn",Volume~.,List$trainingSet,30)
KnnPrediction <- predict(KNN,List$testingSet)
TestResultsKNN <-postResample(KnnPrediction,List$testingSet$Volume)
####
AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)
AllTestResults
EP <- read.csv( file ="/home/zordo/Documents/Ubiqum/R-Task3/data/Epa.csv" , header = TRUE , sep = ',')
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)
List <- TrainAndTestSets(EP$Volume,0.75,EP,123)
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~.,List$trainingSet,5)
PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)
TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)
#### SVM ####
svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,5,10000000,0.0000001)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
#### knn ####
KNN <- TrainingFunction("knn",Volume~.,List$trainingSet,30)
KnnPrediction <- predict(KNN,List$testingSet)
TestResultsKNN <-postResample(KnnPrediction,List$testingSet$Volume)
####
AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)
AllTestResults
ggplot(Lol,
aes(Lol$Volume,ABSsvm))+
geom_point(color="red")+
geom_smooth()
ggplot(Lol,
aes(Lol$Volume,RLTsvm))+
geom_point(color="red")+
geom_smooth()
Absknn <- (List$testingSet$Volume - KnnPrediction)
RLTknn <-  (ABSknn / List$testingSet$Volume)
RLTknn <-  (Absknn / List$testingSet$Volume)
ggplot(Lol,
aes(Lol$Volume,Absknn))+
geom_point(color="red")+
geom_smooth()
ggplot(Lol,
aes(Lol$Volume,RLTknn))+
geom_point(color="red")+
geom_smooth()
a <- c("Volume ~ x4StarReviews","Volume ~.","Volume ~ PositiveServiceReview")
b <- c("rf", "knn","lm")
compare_var_mod <- c()
for ( i   in a) {
for (j in b) {
model <- train(formula(i), data = List$trainingSet, method = b,trainControl=trainControl(method = "repeatedcv", repeats = 4))
pred <- predict(model, newdata = List$testingSet)
pred_metric <- postResample(List$testingSet$Volume, pred)
compare_var_mod <- cbind(compare_var_mod , pred_metric)
}
}
a <- c("Volume ~ x4StarReviews","Volume ~.","Volume ~ PositiveServiceReview")
b <- c("rf", "knn")
compare_var_mod <- c()
for ( i   in a) {
for (j in b) {
model <- train(formula(i), data = List$trainingSet, method = b,trainControl=trainControl(method = "repeatedcv", repeats = 4))
pred <- predict(model, newdata = List$testingSet)
pred_metric <- postResample(List$testingSet$Volume, pred)
compare_var_mod <- cbind(compare_var_mod , pred_metric)
}
}
compare_var_mod
names_var <- c()
for (i in a) {
for(j in b) {
names_var <- append(names_var,paste(i,j))
}
}
names_var
colnames(compare_var_mod) <- names_var
compare_var_mod
compare_var_mod_melt <- melt(compare_var_mod, varnames = c("metric", "model"))
compare_var_mod_melt <- as.data.frame(compare_var_mod_melt)
compare_var_mod_melt
ggplot(compare_var_mod_melt, aes(x=model,y=value)) + geom_col() + facet_grid(metric~., scales="free") +theme(axis.text=element_text(size=5),
axis.title=element_text(size=14,face="bold"))
a <- c("Volume ~ x4StarReviews","Volume ~.","Volume ~ PositiveServiceReview")
b <- c("lm","rf", "knn")
compare_var_mod <- c()
for ( i   in a) {
for (j in b) {
model <- train(formula(i), data = List$trainingSet, method = b,trainControl=trainControl(method = "repeatedcv", repeats = 4))
pred <- predict(model, newdata = List$testingSet)
pred_metric <- postResample(List$testingSet$Volume, pred)
compare_var_mod <- cbind(compare_var_mod , pred_metric)
}
}
compare_var_mod
names_var <- c()
for (i in a) {
for(j in b) {
names_var <- append(names_var,paste(i,j))
}
}
names_var
colnames(compare_var_mod) <- names_var
compare_var_mod
compare_var_mod_melt <- melt(compare_var_mod, varnames = c("metric", "model"))
compare_var_mod_melt <- as.data.frame(compare_var_mod_melt)
compare_var_mod_melt
ggplot(compare_var_mod_melt, aes(x=model,y=value)) + geom_col() + facet_grid(metric~., scales="free") +theme(axis.text=element_text(size=5),
axis.title=element_text(size=14,face="bold"))
a <- c("Volume ~ x4StarReviews","Volume ~.","Volume ~ PositiveServiceReview")
b <- c("lm","rf", "knn")
compare_var_mod <- c()
for ( i   in a) {
for (j in b) {
model <- train(formula(i), data = List$trainingSet, method = b,trainControl=trainControl(method = "repeatedcv", repeats = 4))
pred <- predict(model, newdata = List$testingSet)
pred_metric <- postResample(List$testingSet$Volume, pred)
compare_var_mod <- cbind(compare_var_mod , pred_metric)
}
}
compare_var_mod
names_var <- c()
for (i in a) {
for(j in b) {
names_var <- append(names_var,paste(i,j))
}
}
names_var
colnames(compare_var_mod) <- names_var
compare_var_mod
compare_var_mod_melt <- melt(compare_var_mod, varnames = c("metric", "model"))
compare_var_mod_melt <- as.data.frame(compare_var_mod_melt)
compare_var_mod_melt
ggplot(compare_var_mod_melt, aes(x=model,y=value)) + geom_col() + facet_grid(metric~., scales="free") +theme(axis.text=element_text(size=3),
axis.title=element_text(size=14,face="bold"))
a <- c("Volume ~ x4StarReviews","Volume ~.","Volume ~ PositiveServiceReview")
b <- c("lm","rf", "knn","svmLinear")
compare_var_mod <- c()
for ( i   in a) {
for (j in b) {
model <- train(formula(i), data = List$trainingSet, method = b,trainControl=trainControl(method = "repeatedcv", repeats = 4))
pred <- predict(model, newdata = List$testingSet)
pred_metric <- postResample(List$testingSet$Volume, pred)
compare_var_mod <- cbind(compare_var_mod , pred_metric)
}
}
compare_var_mod
names_var <- c()
for (i in a) {
for(j in b) {
names_var <- append(names_var,paste(i,j))
}
}
names_var
colnames(compare_var_mod) <- names_var
compare_var_mod
compare_var_mod_melt <- melt(compare_var_mod, varnames = c("metric", "model"))
compare_var_mod_melt <- as.data.frame(compare_var_mod_melt)
compare_var_mod_melt
ggplot(compare_var_mod_melt, aes(x=model,y=value)) + geom_col() + facet_grid(metric~., scales="free") +theme(axis.text=element_text(size=3),
axis.title=element_text(size=14,face="bold"))
