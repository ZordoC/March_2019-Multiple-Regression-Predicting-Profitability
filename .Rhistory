#For cleaning variables
rm(list = setdiff(ls(), lsf.str()))
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
#For cleaning variables
# rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
#### Pre Processing ####
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)
#### Training and Testing sets ####
List <- TrainAndTestSets(EP$Volume,0.75,EP,233)
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:3)
{
Models[i] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:3)
{
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
Models[[1]]
TrainAll3Models <- function (formula,data)
{
Model <- vector(mode="list", length=length(methods))
methods <- c("rf","knn","svm")
for(i in 1:length(methods))
{
Model[[i]] <- TrainingFunction(methods[i],formula,data)
}
Model
}
TrainAll3Models(Volume~.,List$trainingSet)
TrainAll3Models <- function (formula,data)
{
Model <- vector(mode="list", length=length(methods))
methods <- c("rf","svm")
for(i in 1:length(methods))
{
Model[[i]] <- TrainingFunction(methods[i],formula,data)
}
Model
TrainAll3Models <- function (formula,data)
{
Model <- vector(mode="list", length=length(methods))
methods <- c("rf","svm")
for(i in 1:length(methods))
{
Model[[i]] <- TrainingFunction(methods[i],formula,data)
}
Model
}
}
TrainAll3Models(Volume~.,List$trainingSet)
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:3)
{
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
TrainAll3Models <- function (formula,data)
{
Model <- vector(mode="list", length=length(methods))
methods <- c("rf","svm")
for(i in 1:length(methods))
{
Model[[i]] <- TrainingFunction(methods[i],formula,data)
}
Model[[1]]
}
TrainAll3Models(Volume~.,List$trainingSet)
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:3)
{
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
Models[[1]]
Models[[2]]
Models[[3]]
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
Models[[1]]
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] = "knn" )
{
Normal <- normalize(EP[,c(13,14,15)])
EPNormal <- cbind(EP[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(Volume,0.75,EPNormal,288)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,ListN$trainingSet,5)
}
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
Models[[1]]
t
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] = "knn" )
{
Normal <- normalize(EP[,c(13,14,15)])
EPNormal <- cbind(EP[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(Volume,0.75,EPNormal,288)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,ListN$trainingSet,5)
}
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] = "knn" )
{
Normal <- normalize(EP[,c(13,14,15)])
EPNormal <- cbind(EP[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(Volume,0.75,EPNormal,288)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,ListN$trainingSet,5)
}
else{
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
}
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] = "knn" )
{
Normal <- normalize(EP[,c(13,14,15)])
EPNormal <- cbind(EP[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(EP$Volume,0.75,EPNormal,288)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,ListN$trainingSet,5)
}
else
{
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
}
Models[[1]]
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] == "knn" )
{
Normal <- normalize(EP[,c(13,14,15)])
EPNormal <- cbind(EP[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(EP$Volume,0.75,EPNormal,288)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,ListN$trainingSet,5)
}
else
{
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
}
Models[[1]]
TrainAll3ModelsAtOnde <- function (data,label,p,seed)
{
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] == "knn" )
{
Normal <- normalize(data[,c(13,14,15)])
EPNormal <- cbind(data[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(data$label,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],label~.,ListN$trainingSet,5)
}
else
{
ListY <- TrainAndTestSets(data$label,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
}
Models
}
TrainAll3Models(EP,Volume,0.75,288)
TrainAll3ModelsAtOnde <- function (data,label,p,seed)
{
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] == "knn" )
{
Normal <- normalize(data[,c(13,14,15)])
EPNormal <- cbind(data[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(data$label,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],label~.,ListN$trainingSet,5)
}
else
{
ListY <- TrainAndTestSets(data$label,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
}
Models
}
TrainAll3ModelsAtOnde(EP,Volume,0.75,288)
TrainAll3ModelsAtOnde(EP,EP$Volume,0.75,288)
TrainAll3ModelsAtOnde(EP,Volume,0.75,288)
TrainAll3ModelsAtOnde <- function (data,label,p,seed)
{
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] == "knn" )
{
Normal <- normalize(data[,c(13,14,15)])
EPNormal <- cbind(data[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(data$label,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],label~.,ListN$trainingSet,5)
}
else
{
ListY <- TrainAndTestSets(data$Volume,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
}
}
TrainAll3ModelsAtOnde <- function (data,label,p,seed)
{
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] == "knn" )
{
Normal <- normalize(data[,c(13,14,15)])
EPNormal <- cbind(data[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(data$label,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],label~.,ListN$trainingSet,5)
}
else
{
ListY <- TrainAndTestSets(data$Volume,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
}
Models
}
TrainAll3ModelsAtOnde(EP,Volume,0.75,288)
TrainAll3ModelsAtOnde <- function (data,label,p,seed)
{
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] == "knn" )
{
Normal <- normalize(data[,c(13,14,15)])
EPNormal <- cbind(data[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(data$Volume,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],label~.,ListN$trainingSet,5)
}
else
{
ListY <- TrainAndTestSets(data$Volume,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
}
Models
}
TrainAll3ModelsAtOnde(EP,Volume,0.75,288)
TrainAll3ModelsAtOnde <- function (data,label,p,seed)
{
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] == "knn" )
{
Normal <- normalize(data[,c(13,14,15)])
EPNormal <- cbind(data[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(data$label,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],label~.,ListN$trainingSet,5)
}
else
{
ListY <- TrainAndTestSets(data$label,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,ListY$trainingSet,5)
}
}
Models
}
TrainAll3ModelsAtOnde(EP,Volume,0.75,288)
TrainAll3ModelsAtOnde <- function (data,label,p,seed)
{
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] == "knn" )
{
Normal <- normalize(data[,c(13,14,15)])
EPNormal <- cbind(data[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(data$Volume,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],label~.,ListN$trainingSet,5)
}
else
{
ListY <- TrainAndTestSets(data$Volume,p,data,seed)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,ListY$trainingSet,5)
}
}
Models
}
TrainAll3ModelsAtOnde(EP,Volume,0.75,288)
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] == "knn" )
{
Normal <- normalize(EP[,c(13,14,15)])
EPNormal <- cbind(EP[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(EP$Volume,0.75,EPNormal,288)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,ListN$trainingSet,5)
}
else
{
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
}
for( i in 1:3){
print(Models[[i]])
}
#For cleaning variables
rm(list = setdiff(ls(), lsf.str()))
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
#For cleaning variables
rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
#### Pre Processing ####
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)
#### Training and Testing sets ####
List <- TrainAndTestSets(EP$Volume,0.75,EP,233)
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~.,List$trainingSet,5)
PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)
TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)
#### SVM ####
svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,5)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
#### knn ####
Normal <- normalize(EP[,c(13,14,15)])
EPNormal <- cbind(EP[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
EPNormal
KnnList <- TrainAndTestSets(EPNormal$Volume,0.75,data,233)
KNN <- TrainingFunction("knn",Volume~.,KnnList$trainingSet,5)
KnnPrediction <- predict(KNN,List$testingSet)
TestResultsKNN <-postResample(KnnPrediction,data$Volume)
####
AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)
AllTestResults
#### Training All 3 models at once ####
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] == "knn" )
{
Normal <- normalize(EP[,c(13,14,15)])
EPNormal <- cbind(EP[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(EP$Volume,0.75,EPNormal,288)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,ListN$trainingSet,5)
}
else
{
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
}
for( i in 1:3){
print(Models[[i]])
}
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~.,List$trainingSet,5)
PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)
TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)
svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,5)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
Normal <- normalize(EP[,c(13,14,15)])
EPNormal <- cbind(EP[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
KnnList <- TrainAndTestSets(EPNormal$Volume,0.75,data,233)
KnnList <- TrainAndTestSets(EPNormal$Volume,0.75,data,233)
View(EPNormal)
KnnList <- TrainAndTestSets(EP$Volume,0.75,data,233)
List <- TrainAndTestSets(EP$Volume,0.75,EP,233)
KnnList <- TrainAndTestSets(EPNormal$Volume,0.75,EPNormal,233)
KNN <- TrainingFunction("knn",Volume~.,KnnList$trainingSet,5)
KnnPrediction <- predict(KNN,List$testingSet)
TestResultsKNN <-postResample(KnnPrediction,data$Volume)
TestResultsKNN <-postResample(KnnPrediction,KnnList$trainingSet$Volume)
TestResultsKNN <-postResample(KnnPrediction,KnnList$testingSet$Volume)
AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)
AllTestResults
TrainingFunction <- function(method,formula,data,tune,c=1000,gamma=0.0001)
{
fitcontrol <-  trainControl(method = "repeatedcv", repeats = 4)
if(method == "rf") {
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "knn"){
preObj <- preProcess(data[, c(13,14,15)], method=c("center", "scale"))
data <- predict(preObj, data)
Model <- train(formula, data = data,method = method, trcontrol = fitcontrol , tunelenght = tune)
}
else if (method == "svm"){
Model <- svm(formula, data = data,cost=c , gamma = gamma)
}
return(Model)
}
svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,5,100000,0.00001)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
TestResultsSVM
source('~/Documents/Ubiqum/R-Task3/Scripts/ModelFunctions.R')
library(caret)
library(readr)
library(rstudioapi)
library(e1071)
library(dplyr)
library(rpart)
#For cleaning variables
rm(list = setdiff(ls(), lsf.str()))
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
EP <- read.csv( file ="./data/Epa.csv" , header = TRUE , sep = ',')
NP <- read.csv(file = "./data/Npa.csv", header = TRUE , sep =',')
#### Pre Processing ####
EP <- EP[,c(1,5,9,18)]
EP <- PPfunction(EP)
EP <- RmOut(EP)
#### Training and Testing sets ####
List <- TrainAndTestSets(EP$Volume,0.75,EP,233)
#### Random Forest ####
ModelRandomForest <- TrainingFunction("rf",Volume~.,List$trainingSet,5)
PredictionRandomForest <- predict(ModelRandomForest,List$testingSet)
TestResultsRF <- postResample(PredictionRandomForest,List$testingSet$Volume)
#### SVM ####
svm.model <- TrainingFunction("svm",Volume~.,List$trainingSet,5,100000,0.00001)
svm.pred <- predict(svm.model,List$testingSet)
TestResultsSVM <- postResample(svm.pred,List$testingSet$Volume)
#### knn ####
Normal <- normalize(EP[,c(13,14,15)])
EPNormal <- cbind(EP[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
KnnList <- TrainAndTestSets(EPNormal$Volume,0.75,EPNormal,233)
KNN <- TrainingFunction("knn",Volume~.,KnnList$trainingSet,5)
KnnPrediction <- predict(KNN,List$testingSet)
TestResultsKNN <-postResample(KnnPrediction,KnnList$testingSet$Volume)
####
AllTestResults <- cbind(TestResultsKNN,TestResultsRF,TestResultsSVM)
AllTestResults
#### Training All 3 models at once ####
methods <- c("rf","knn","svm")
Models <- vector(mode = "list" , length = 3)
for(i in 1:length(methods))
{
if (methods[i] == "knn" )
{
Normal <- normalize(EP[,c(13,14,15)])
EPNormal <- cbind(EP[c(1,2,3,4,5,6,7,8,9,10,11,12)],Normal)
ListN <- TrainAndTestSets(EP$Volume,0.75,EPNormal,288)
Models[[i]] <- TrainingFunction(methods[i],Volume~.,ListN$trainingSet,5)
}
else
{
Models[[i]] <- TrainingFunction(methods[i],Volume~.,List$trainingSet,5)
}
}
for( i in 1:3){
print(Models[[i]])
}
source('~/Documents/Ubiqum/R-Task3/Scripts/Process.R')
